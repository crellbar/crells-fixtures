Refactors
---------
Switch the AdaptorExample namespace to be TestAdaptors
Refactor to better use namespaces within the code and put interfaces with their owners
Refactor DataDefaults impl to be scoped to the default at construction (i.e. not require entitytype to be passed)
Refactor defaults to applied last as in future we'll want defaults to possibly reference properties previously set with rules to ensure valid relational data


Low level scratch (code)
------------------------

Create combined interface called BuilderData that extends DataDefaults and StateData ... hmmm?

High level scratch (arch/feature)
---------------------------------
* Implement some kind of integration test suite that allows writing to an in memory store (e.g. an array) or sqlite db
    * Should this also allow querying back against it from integration test
    * Ensure two withData calls lead to a single entity being written and overlapping properties take the latter data

* Allow is / with / but / withState or similar methods for applying states

* Allow relating entities, using the type of the related builder we can guess which it's supposed to be if there's just one of that type - if there are multiple of the type we need to allow named relationships to be specified

* Allow rules against defaults e.g. incrememntal field, conditional incremental field, conditional fields, fields determined values in other fields

* Allow single entities that span multiple persistence buckets/tables (e.g. player is in person table with 1:1 extension in player table)

* Do a few examples, a simple user example, a more complex football team example (with unique player numbers per team through default data rules), a hierarchy example where a whole tree can be generated from a single node

